@model UpdateActorDto
@{
	ViewBag.Actoractiv = "Actoractiv";
}
<br />
<div class="modal-body scroll-y px-10 px-lg-15 pt-0 pb-15">
	<!--begin:Form-->
	<form class="form" asp-action="Update" enctype="multipart/form-data">
		<!--begin::Heading-->
		<div class="mb-13 text-center">
			<!--begin::Title-->
			<h1 class="mb-3">Update Actor</h1>
			<!--end::Title-->
			<!--begin::Description-->
			<div class="text-muted fw-semibold fs-5">
				Please enter valid data
			</div>
			<!--end::Description-->
		</div>
		<!--end::Heading-->
		<!--begin::Input group-->

		<div class="row">
			<div class="col-md-4">
				<div class="d-flex flex-column mb-8 fv-row">
					<!--begin::Label-->
					<label class="d-flex align-items-center fs-6 fw-semibold mb-2" asp-for="Name">
					</label>
					<!--end::Label-->
					<input asp-for="Name" class="form-control form-control-solid" placeholder="Enter Full Name" />
					<span asp-validation-for="Name" class="text-danger"></span>
				</div>
			</div>
			<div class="col-md-4">
				<div class="d-flex flex-column mb-8 fv-row">
					<!--begin::Label-->
					<label class="d-flex align-items-center fs-6 fw-semibold mb-2" asp-for="Bio">
					</label>
					<!--end::Label-->
					<input asp-for="Bio" class="form-control form-control-solid" placeholder="Enter Bio" />
					<span asp-validation-for="Bio" class="text-danger"></span>
				</div>
			</div>
			<div class="col-md-4">
				<div class="d-flex flex-column mb-8 fv-row">
					<!--begin::Label-->
					<label class="d-flex align-items-center fs-6 fw-semibold mb-2" asp-for="DOB">
					</label>
					<!--end::Label-->
					<input asp-for="DOB" class="form-control form-control-solid" placeholder="Enter Birth Day" />
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-4">
				<div class="d-flex flex-column mb-8 fv-row">
					<!--begin::Label-->
					<label class="d-flex align-items-center fs-6 fw-semibold mb-2" asp-for="ImageURl">
					</label>
					<!--end::Label-->
					<input asp-for="ImageURl" class="form-control form-control-solid" placeholder="Enter Image" type="file" id="fileInput" onchange="checkFileType()" />
					<div id="fileTypeResult" class="text-danger"></div>
					<span asp-validation-for="ImageURl" class="text-danger"></span>
				</div>
			</div>
			<div class="col-md-4">
				<div class="d-flex flex-column mb-8 fv-row">
					<!--begin::Label-->
					<label class="d-flex align-items-center fs-6 fw-semibold mb-2" asp-for="Rating">
					</label>
					<!--end::Label-->
					<input asp-for="Rating" class="form-control form-control-solid" placeholder="Enter Rating" />
				</div>
			</div>
			<div class="col-md-4">
				<div class="d-flex flex-column mb-8 fv-row">
					<!--begin::Label-->
					<label class="d-flex align-items-center fs-6 fw-semibold mb-2" asp-for="Gender">
					</label>
					<!--end::Label-->
					<select asp-for="Gender" class="form-select form-select-solid" data-control="select2" data-hide-search="true" data-placeholder="Select a Gender">
						<option value="@Gender.male">male</option>
						<option value="@Gender.female">female</option>
					</select>
				</div>
			</div>
		</div>
		<!--begin::Actions-->
		<div class="text-center">
			<a type="reset" href="~/Actor/Index" id="kt_modal_new_target_cancel" class="btn btn-light me-3">Cancel</a>
			<input type="submit" id="kt_modal_new_target_submit" class="btn btn-primary">
			<span class="indicator-progress">
				Please wait...
				<span class="spinner-border spinner-border-sm align-middle ms-2"></span>
			</span>
			</input>
		</div>
		<!--end::Actions-->
	</form>
	<!--end:Form-->
</div>
<script>
	function checkFileType() {
		var fileInput = document.getElementById('fileInput');
		var fileTypeResult = document.getElementById('fileTypeResult');

		if (fileInput.files.length > 0) {
			var selectedFile = fileInput.files[0];
			var fileType = selectedFile.type;

			if (fileType === 'image/jpeg' || fileType === 'image/jpg' || fileType === 'image/png') {
				fileTypeResult.innerHTML = '';
			} else {
				fileTypeResult.innerHTML = 'make sure file type.';
				fileInput.value = ''; // Clear the input to prevent submitting invalid files
			}
		} else {
			fileTypeResult.innerHTML = 'No file selected.';
		}
	}
</script>
<script>
	document.getElementById("fileInput").addEventListener("change", function () {
		const fileInput = this;
		const fileSizeLimit = 5 * 1024 * 1024; // 2MB in bytes

		if (fileInput.files.length > 0) {
			const fileSize = fileInput.files[0].size;
			const imageError = document.getElementById("fileTypeResult");

			if (fileSize > fileSizeLimit) {
				imageError.textContent = "Image size exceeds the limit of 5MB.";
				fileInput.value = ""; // Clear the selected file
			} else {
				imageError.textContent = "";
			}
		}
	});
</script>

<script>
	const ImageSignatures = {
		".jpg": [0xFF, 0xD8, 0xFF, 0xE0], // JPEG
		".png": [0x89, 0x50, 0x4E, 0x47], // PNG
		".gif": [0x47, 0x49, 0x46, 0x38], // GIF
		".bmp": [0x42, 0x4D],             // BMP
		".tiff": [0x49, 0x49, 0x2A, 0x00] // TIFF (little-endian)
		// Add more image types and their signatures here
	};

	document.getElementById("fileInput").addEventListener("change", function (event) {
		const imageFile = event.target.files[0];
		const validationResult = document.getElementById("fileTypeResult");

		if (imageFile) {
			const validExtensions = Object.keys(ImageSignatures);

			const reader = new FileReader();
			reader.onloadend = function () {
				const buffer = new Uint8Array(reader.result);

				for (const extension of validExtensions) {
					const signature = ImageSignatures[extension];
					if (isSignatureMatch(buffer, signature)) {
						return;
					}
				}
				fileInput.value = '';
				validationResult.textContent = "Invalid image.";

			};

			reader.readAsArrayBuffer(imageFile);
		}
	});

	function isSignatureMatch(buffer, signature) {
		if (buffer.length < signature.length) {
			return false;
		}

		for (let i = 0; i < signature.length; i++) {
			if (buffer[i] !== signature[i]) {
				return false;
			}
		}

		return true;
	}
</script>